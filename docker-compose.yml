# Bring up all the pieces necessary to run the workbench
# Data persists in Docker volumes and in local dir

# This file passes through all necessary env variables to requisite
# Docker containers and makes them available when running commands via
# `docker exec`.

version: '3.4'

services:
  rabbitmq:
    image: rabbitmq:3.7.8-management
    ports: [ '15672' ] # open management port, for debugging
    networks: [ 'dev' ]
    environment:
      # Use just one CPU
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '+S 1:1 +stbt ts +A 12'

  flask:
    build:
      context: .
      target: autoscrapebuild
    volumes:
      - ./:/app:ro
      - virtualenvs:/root/.local/share/virtualenvs/:rw
    command: [ 'pipenv', 'run', 'python', 'autoscrape-server.py' ]
    ports:
      - '5000:5000'
    links:
      - rabbitmq
    depends_on: [ 'rabbitmq' ]
    networks: [ 'dev' ]
    environment:
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/

  celery:
    build:
      context: .
      target: autoscrapebuild
    volumes:
      - ./:/app:ro
      - virtualenvs:/root/.local/share/virtualenvs/:rw
    command: [ 'pipenv', 'run', 'celery', '-A', 'autoscrape.tasks', 'worker', '--loglevel=info' ]
    #user: nobody
    links:
      - rabbitmq
    depends_on: [ 'rabbitmq' ]
    networks: [ 'dev' ]
    environment:
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/

networks:
  dev: {}

volumes:
  virtualenvs: {}

